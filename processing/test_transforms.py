#!/usr/bin/env python3
import numpy as np


def test_get_mean_filter():
    from .transforms import get_mean_filter
    mean_filter = get_mean_filter((3, 3))
    assert mean_filter.shape == (
        3, 3), 'Mean filter constructed shape is incorrect.'
    assert np.allclose(np.zeros((3, 3)) + (1 / 9), mean_filter), \
        '(3, 3) mean filter constructed using get_mean_filter is incorrect.'
    mean_filter = get_mean_filter((3, 5))
    assert np.allclose(np.zeros((3, 5)) + (1 / 15), mean_filter), \
        '(3, 3) mean filter constructed using get_mean_filter is incorrect.'


def test_get_gaussian_filter():
    from .transforms import get_gaussian_filter
    correct_three = np.array([
        [0.07511361, 0.1238414, 0.07511361],
        [0.1238414, 0.20417996, 0.1238414],
        [0.07511361, 0.1238414, 0.07511361]
    ])
    assert np.allclose(get_gaussian_filter((3, 3)), correct_three), \
        'Gaussian filter for 3x3 with sigma=1.0 is incorrect.'
    correct_three_two = np.array([
        [0.10186806, 0.11543164, 0.10186806],
        [0.11543164, 0.13080118, 0.11543164],
        [0.10186806, 0.11543164, 0.10186806]
    ])
    assert np.allclose(get_gaussian_filter((3, 3), sigma=2.0), correct_three_two), \
        'Gaussian filter for 3x3 with sigma=2.0 is incorrect.'
    correct_threefive_two = np.array([
        [0.04866324, 0.05514267, 0.04866324],
        [0.07080459, 0.08023211, 0.07080459],
        [0.08023211, 0.09091489, 0.08023211],
        [0.07080459, 0.08023211, 0.07080459],
        [0.04866324, 0.05514267, 0.04866324]
    ])
    assert np.allclose(get_gaussian_filter((3, 5), sigma=2.0), correct_threefive_two), \
        'Gaussian filter for 3x5 with sigma=2.0 is incorrect.'


def test_pad():
    from .transforms import pad
    test_image = np.ones((5, 5))
    test_padded_image = pad(test_image, np.zeros((3, 3)))
    assert test_padded_image.shape == (
        7, 7), 'Padded image has incorrect shape with 3x3 filter.'
    assert test_padded_image[0, 0] == 0 and test_padded_image[1, 1] == 1, \
        'Padding shifted pixel values incorrectly.'
    test_padded_image = pad(test_image, np.zeros((5, 5)))
    assert test_padded_image.shape == (
        9, 9), 'Padded image has incorrect shape with 5x5 filter.'


def test_cross_correlate_2d():
    from .transforms import cross_correlate_2d
    from scipy import signal
    test_filter = np.random.randn(3, 5)
    test_image = np.random.randn(7, 7)
    test_cc = cross_correlate_2d(test_image, test_filter)
    correct_cc = signal.correlate2d(test_image, test_filter, mode='same')
    assert np.allclose(
        correct_cc, test_cc), 'Cross-correlate in 2D is incorrect.'


def test_cross_correlate():
    from .transforms import cross_correlate
    test_image = np.array([
        [[3, 5, 4],
         [2, 9, 6],
         [7, 2, 3],
         [4, 4, 3],
         [9, 8, 0],
         [2, 2, 3],
         [3, 7, 6]],

        [[5, 0, 7],
         [7, 1, 4],
         [3, 0, 0],
         [1, 9, 5],
         [4, 1, 6],
         [4, 2, 1],
         [6, 5, 2]],

        [[9, 8, 3],
         [4, 9, 8],
         [3, 3, 7],
         [5, 7, 3],
         [0, 2, 0],
         [9, 2, 4],
         [3, 6, 7]],

        [[7, 6, 7],
         [4, 8, 7],
         [7, 4, 1],
         [5, 6, 0],
         [6, 4, 1],
         [6, 5, 9],
         [4, 1, 0]],

        [[9, 8, 7],
         [2, 8, 7],
         [0, 5, 7],
         [7, 2, 7],
         [5, 4, 6],
         [5, 1, 1],
         [5, 4, 3]],

        [[8, 3, 7],
         [2, 3, 2],
         [0, 3, 3],
         [0, 3, 0],
         [3, 6, 2],
         [8, 7, 3],
         [8, 0, 1]],

        [[9, 4, 0],
         [3, 4, 2],
         [7, 4, 7],
         [5, 7, 4],
         [3, 5, 7],
         [3, 0, 7],
         [6, 8, 7]]
    ])
    test_filter = np.array([
        [0, 0, 1],
        [1, 0, 1],
        [0, 0, 1],
        [0, 0, 1],
        [0, 1, 0]
    ])
    test_output = cross_correlate(test_image, test_filter)
    cc_output = np.array([
        [[18., 18., 13.],
         [14., 11., 11.],
         [8., 16., 15.],
         [18., 16.,  9.],
         [6.,  6.,  4.],
         [18., 14., 12.],
         [3.,  6.,  7.]],

        [[20., 25., 25.],
            [20., 18., 21.],
            [19., 33., 18.],
            [25., 19.,  9.],
            [25., 14., 12.],
            [27., 31., 24.],
         [6.,  3.,  3.]],

        [[26., 35., 32.],
            [27., 17., 25.],
            [22., 32., 22.],
            [29., 17., 14.],
            [27., 24., 28.],
            [25., 21., 22.],
            [9.,  6.,  4.]],

        [[25., 29., 33.],
            [24., 23., 20.],
            [22., 36., 26.],
            [18., 17., 20.],
            [32., 23., 20.],
            [26., 25., 15.],
            [17.,  2.,  5.]],

        [[21., 32., 24.],
            [20., 25., 27.],
            [28., 30., 24.],
            [26., 27., 14.],
            [36., 26., 24.],
            [29., 15., 19.],
            [12., 13., 16.]],

        [[11., 23., 18.],
            [23., 24., 25.],
            [19., 26., 18.],
            [17., 24., 23.],
            [29., 15., 27.],
            [28., 17., 17.],
            [5.,  1.,  1.]],

        [[7., 15., 11.],
            [15., 15., 24.],
            [14., 15., 13.],
            [11., 18., 18.],
            [16., 11., 11.],
            [22., 18., 13.],
            [8.,  7.,  3.]]
    ])
    assert test_output.shape == cc_output.shape, \
        'Shapes for cross_correlate outputs do not match.'
    assert np.allclose(test_output, cc_output), \
        'Output for cross_correlate is incorrect.'


def test_sharpen_transform():
    from .transforms import sharpen_transform
    test_image = np.array([
        [[3, 5, 4],
            [2, 9, 6],
            [7, 2, 3],
            [4, 4, 3],
            [9, 8, 0],
            [2, 2, 3],
            [3, 7, 6]],

        [[5, 0, 7],
            [7, 1, 4],
            [3, 0, 0],
            [1, 9, 5],
            [4, 1, 6],
            [4, 2, 1],
            [6, 5, 2]],

        [[9, 8, 3],
            [4, 9, 8],
            [3, 3, 7],
            [5, 7, 3],
            [0, 2, 0],
            [9, 2, 4],
            [3, 6, 7]],

        [[7, 6, 7],
            [4, 8, 7],
            [7, 4, 1],
            [5, 6, 0],
            [6, 4, 1],
            [6, 5, 9],
            [4, 1, 0]],

        [[9, 8, 7],
            [2, 8, 7],
            [0, 5, 7],
            [7, 2, 7],
            [5, 4, 6],
            [5, 1, 1],
            [5, 4, 3]],

        [[8, 3, 7],
            [2, 3, 2],
            [0, 3, 3],
            [0, 3, 0],
            [3, 6, 2],
            [8, 7, 3],
            [8, 0, 1]],

        [[9, 4, 0],
            [3, 4, 2],
            [7, 4, 7],
            [5, 7, 4],
            [3, 5, 7],
            [3, 0, 7],
            [6, 8, 7]]
    ])
    test_three_output = np.array([
        [[3.19895501,  5.5578828,  4.2545775],
         [1.77708547, 10.23432983,  6.57737392],
         [7.77105176,  1.84611315,  3.11937301],
         [4.11043621,  4.15103598,  3.18920945],
         [10.10967967,  8.93468417, -0.3873557],
         [1.77180831,  1.80713092,  3.18393229],
         [3.2192549,  7.91072465,  6.81611993]],

        [[5.23508638, -0.61716492,  7.63137887],
            [7.43689226,  0.44292597,  3.86113588],
            [2.80632215, -0.80718314, -0.77105176],
            [0.47743981,  9.90991589,  5.34837346],
            [3.98944567,  0.41368929,  6.61107899],
            [3.89118132,  1.72512261,  0.59234442],
            [6.54205131,  5.36420495,  1.86641304]],

        [[9.87093365,  8.76658337,  2.76733992],
            [3.73648571,  9.78688325,  8.52783735],
            [2.75150843,  2.6215811,  7.57656515],
            [5.27245109,  7.48357796,  3.06009089],
            [-0.83480228,  1.64107221, -0.57209675],
            [9.810034,  1.78155387,  4.08039077],
            [2.85666748,  6.65167876,  7.81531116]],

        [[7.47910956,  6.10515905,  7.46774647],
            [3.82581327,  8.24402318,  7.18393229],
            [7.54651971,  3.7011631,  0.26346208],
            [5.05643126,  6.32360518, -0.5976738],
            [6.1681008,  4.03532261,  0.56229898],
            [6.16524994,  5.35731025, 10.04350285],
            [4.079582,  0.74257163, -0.54571094]],

        [[9.92127898,  8.68700136,  7.45880967],
            [1.61630393,  8.43850979,  7.27406862],
            [-0.56154243,  5.07430484,  7.53311452],
            [7.62610171,  1.6171127,  7.68700136],
            [4.99025444,  3.99919123,  6.50226031],
            [4.88590416,  0.49854846,  0.57893923],
            [5.16444117,  4.40684682,  3.24768281]],

        [[8.70283285,  2.92569516,  7.75602904],
            [1.62077233,  2.71618582,  1.53225353],
            [-0.47830079,  2.79049066,  2.7807451],
            [-0.59686503,  2.76125399, -0.80190597],
            [2.7807451,  6.33415951,  1.63660382],
            [8.51728303,  7.62529294,  2.85951834],
            [8.68253297, -0.48562005,  0.71699459]],

        [[10.12997955,  4.41820991, -0.25295997],
            [2.9114812,  4.27406862,  1.94518628],
            [7.88595637,  4.19976378,  7.86118809],
            [5.50306907,  7.6817242,  4.2147865],
            [3.08485917,  5.32360518,  7.74709225],
            [2.89118132, -0.58550194,  7.64801913],
            [6.56235119,  9.16815302,  7.87093365]]
    ])
    assert np.allclose(sharpen_transform(test_image, (3, 3)), test_three_output), \
        'Sharpen transform for 3x3 filter with standard arguments is incorrect.'
    test_threefive_output = np.array([
        [[3.18639439,  5.53978877,  4.27534954],
         [1.7894312, 10.21880254,  6.57596454],
         [7.79793949,  1.8439138,  3.1044265],
         [4.15200147,  4.17235476,  3.19829639],
         [10.14309477,  8.97045943, -0.36604979],
         [1.78698827,  1.83799785,  3.18867003],
         [3.2190941,  7.92852545,  6.81153729]],

        [[5.27202778, -0.60334742,  7.65976412],
            [7.48033789,  0.45616838,  3.90508703],
            [2.83146456, -0.78072975, -0.71285595],
            [0.49273365,  9.9534754,  5.41341255],
            [4.01537806,  0.44682823,  6.64345322],
            [3.93080902,  1.75911393,  0.61125986],
            [6.57613533,  5.4136343,  1.89768139]],

        [[9.90114257,  8.74261689,  2.76508646],
            [3.77593974,  9.75384271,  8.51794188],
            [2.76470392,  2.62504191,  7.54836336],
            [5.23484908,  7.4971537,  3.0218983],
            [-0.86652876,  1.63780624, -0.58111103],
            [9.81773991,  1.76548292,  4.09431385],
            [2.87737256,  6.64830608,  7.82276357]],

        [[7.48856957,  6.19775218,  7.4824807],
            [3.8398714,  8.35417647,  7.23613609],
            [7.59488962,  3.75835097,  0.31789667],
            [5.12446734,  6.33015373, -0.59001629],
            [6.20725703,  4.02146388,  0.56551915],
            [6.15620162,  5.34718963, 10.07339279],
            [4.05331059,  0.74091902, -0.51296055]],

        [[9.90749552,  8.68857871,  7.516738],
            [1.58361072,  8.44432245,  7.29675247],
            [-0.6003642,  5.06007305,  7.5078711],
            [7.62236883,  1.59167557,  7.66751083],
            [5.019813,  4.00420365,  6.49006707],
            [4.91238328,  0.50242096,  0.52973242],
            [5.17533891,  4.37477822,  3.18428346]],

        [[8.75418688,  2.94573962,  7.77083024],
            [1.6441792,  2.74324004,  1.56845447],
            [-0.48752735,  2.81719755,  2.84419397],
            [-0.59526912,  2.79921881, -0.72048983],
            [2.80762565,  6.37596539,  1.68799189],
            [8.57586171,  7.67016344,  2.89290882],
            [8.74489862, -0.45255638,  0.7427507]],

        [[10.15270463,  4.39652831, -0.28077012],
            [2.94978506,  4.25316153,  1.91846652],
            [7.91509495,  4.21068726,  7.84362224],
            [5.50781969,  7.72327089,  4.2052641],
            [3.08053572,  5.3686596,  7.76480491],
            [2.91393783, -0.55051358,  7.69816319],
            [6.59228544,  9.19253071,  7.91083034]]
    ])
    assert np.allclose(sharpen_transform(test_image, (3, 5)), test_threefive_output), \
        'Sharpen transform for 3x5 filter with standard arguments is incorrect.'
    test_three_two_output = np.array([
        [[3.2172997,  5.64104825,  4.31374234],
         [1.79222305, 10.37986725,  6.64647368],
         [7.84611249,  1.84382113,  3.13037982],
         [4.16027619,  4.23634521,  3.21458699],
         [10.23182653,  9.00500407, -0.39927761],
         [1.77456215,  1.83297027,  3.19692609],
         [3.25533421,  8.01452682,  6.90723333]],

        [[5.30831691, -0.68993362,  7.67769816],
            [7.44545027,  0.39156083,  3.86419475],
            [2.80036119, -0.93712969, -0.84611249],
            [0.41735987,  9.98191774,  5.38842675],
            [3.9646782,  0.38342268,  6.63966364],
            [3.90494197,  1.64822315,  0.56268788],
            [6.58806556,  5.44140945,  1.88185565]],

        [[9.97106688,  8.86106067,  2.78951033],
            [3.71615403,  9.89909518,  8.60030103],
            [2.73652764,  2.57082602,  7.6138646],
            [5.25394961,  7.57178927,  3.08149445],
            [-0.88004968,  1.57625145, -0.62881278],
            [9.85696335,  1.77727487,  4.11952896],
            [2.87914293,  6.71573267,  7.87462425]],

        [[7.58673745,  6.14261529,  7.51880657],
            [3.80578662,  8.27842054,  7.19692609],
            [7.57311738,  3.6577459,  0.17968655],
            [5.12905171,  6.36534042, -0.68450819],
            [6.1439434,  4.05840812,  0.52194065],
            [6.22410974,  5.35853039, 10.1000621],
            [4.08691988,  0.76642401, -0.54050829]],

        [[10.04984862,  8.77414079,  7.54870294],
            [1.55316512,  8.51066843,  7.31916777],
            [-0.59349099,  5.06925898,  7.61796192],
            [7.66003726,  1.5857742,  7.77414079],
            [4.99728728,  3.96739092,  6.54460562],
            [4.88728108,  0.48800346,  0.60753243],
            [5.19150066,  4.40470304,  3.23086328]],

        [[8.82712348,  2.93074102,  7.82573888],
            [1.53821694,  2.67811952,  1.48119343],
            [-0.55412837,  2.7473785,  2.74466579],
            [-0.65189911,  2.73924036, -0.91946879],
            [2.74466579,  6.40066222,  1.59119963],
            [8.56497923,  7.62742818,  2.79897659],
            [8.78908897, -0.45901384,  0.7107286]],

        [[10.26986104,  4.47263392, -0.24852418],
            [2.94297648,  4.31916777,  1.93616645],
            [7.99144049,  4.24990878,  7.96835417],
            [5.5772147,  7.75647989,  4.2702824],
            [3.10458078,  5.36534042,  7.85563524],
            [2.90494197, -0.58396824,  7.76328993],
            [6.62610007,  9.24810282,  7.97106688]]
    ])
    assert np.allclose(sharpen_transform(test_image, (3, 3), sigma=2.0), test_three_two_output), \
        'Sharpen transform for 3x3 input with standard arguments is incorrect.'
    test_three_two_half_output = np.array([
        [[3.54324926,  6.60262063,  4.78435585],
         [1.48055762, 12.44966811,  7.61618421],
         [9.11528122,  1.60955284,  3.32594956],
         [4.40069047,  4.59086302,  3.53646747],
         [12.07956631, 10.51251017, -0.99819403],
         [1.43640538,  1.58242569,  3.49231523],
         [3.63833554,  9.53631705,  8.26808332]],

        [[5.77079227, -1.72483406,  8.69424539],
            [8.11362567, -0.52109793,  3.66048687],
            [2.50090298, -2.34282423, -2.11528122],
            [-0.45660032, 11.45479435,  5.97106688],
            [3.91169551, -0.54144329,  7.59915911],
            [3.76235493,  1.12055788, -0.09328031],
            [7.4701639,  6.10352361,  1.70463911]],

        [[11.4276672, 10.15265168,  2.47377583],
            [3.29038507, 11.24773795,  9.50075257],
            [2.3413191,  1.92706506,  8.5346615],
            [5.63487402,  8.42947317,  3.20373613],
            [-2.20012419,  0.94062863, -1.57203196],
            [11.14240837,  1.44318716,  4.29882241],
            [2.69785733,  7.78933166,  9.18656062]],

        [[8.46684363,  6.35653823,  8.29701644],
            [3.51446656,  8.69605136,  7.49231523],
            [8.43279344,  3.14436476, -1.05078361],
            [5.32262929,  6.91335106, -1.71127048],
            [6.35985849,  4.14602031, -0.19514837],
            [6.56027435,  5.89632597, 11.75015524],
            [4.2172997,  0.41606001, -1.35127074]],

        [[11.62462154,  9.93535197,  8.37175735],
            [0.88291281,  9.27667107,  7.79791942],
            [-1.48372747,  5.17314746,  8.54490481],
            [8.65009314,  0.96443551,  8.93535197],
            [4.99321821,  3.9184773,  7.36151404],
            [4.71820269, -0.27999134,  0.01883106],
            [5.47875165,  5.01175761,  3.5771582]],

        [[10.06780871,  2.82685254,  9.06434719],
            [0.84554235,  2.19529879,  0.70298356],
            [-1.38532093,  2.36844625,  2.36166446],
            [-1.62974778,  2.34810089, -2.29867199],
            [2.36166446,  7.00165555,  0.97799909],
            [9.41244808,  8.56857044,  2.49744147],
            [9.97272243, -1.14753461,  0.27682149]],

        [[12.17465259,  5.1815848, -0.62131044],
            [2.85744121,  4.79791942,  1.84041612],
            [9.47860123,  4.62477196,  9.42088541],
            [6.44303675,  8.89119973,  4.67570599],
            [3.26145195,  5.91335106,  9.1390881],
            [2.76235493, -1.45992059,  8.90822482],
            [7.56525017, 11.12025704,  9.4276672]]
    ])
    assert np.allclose(
        sharpen_transform(test_image, (3, 3), sigma=2.0, alpha=0.5), test_three_two_half_output
    ), \
        'Sharpen transform for 3x3 input with standard arguments is incorrect.'
